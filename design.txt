The design document discusses the projectâ€™s technical implementation details and reasoning behind design decisions.

    For this project, there were two faces to our web app. First, there was the user-facing front-end, which we constructed using HTML and CSS, and there was also the back-end which we implemented using Python. For the front end of this project, we focussed on gathering data from the user effectively and comprehensively. Specifically, this meant asking the user what type of function they wanted to graph. Then based on their response, we had to display the correct number of text boxes for them to enter the graphable values. In order to accomplish this, we had to add a dropdown menu using HTML forms and then use Javascript to rotate the correct number of boxes in and out of the user's screen. For example, a user graphing a linear function only needs two textboxes, while a user graphing a quadratic needs three. One of our early goals was to make our project very useful to users with limited technical backgrounds. We were able to accomplish this by having a simple and easy-to-use interface that was styled using CSS. 

    The next phase of our project was to implement the actual graphing capabilities. We chose to use Python because the script based language would enable us to easily handle all computations for graphing. We chose to use two libraries for this project: MatPlotLib and Flask. MatPlotLib helped us implement the graphing functionality. All graphs that our tool supports are valid in the domain [-infinity to +infinity. However, we chose to restrict the user's domain to [-10 to +10] in order to provide consistent and functional graphing. Then, we wrote functions that calculated the corresponding y values based on the user's inputted function. We then utilized MatPlotLib to graph the XY coordinate pairs that we computed. One additional feature that we chose to implement was SmartScale. SmartScale allows the user to have the y-axis change based on what domain best suits their graph. For example, a user trying to graph the line y=2x+1 will have different y-axises than someone graphing y=99x+999. We were able to scale the axis based on the local maximums and minimums
in the domain [-10 to 10]. 

    In order to successfully integrate our HTML front end with our Python, we needed to use Flask. Flask is a web framework that allowed us to pass data between Python and HTML. For example, if the user wanted to graph y=3x^2+4x+1, then we needed Flask to transfer the values from the HTML textboxes into the correct Python function and then pass the correct graph back to the HTML to be displayed.
